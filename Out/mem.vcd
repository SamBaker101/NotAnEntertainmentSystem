$date
	Tue Jul 18 13:42:51 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_mem $end
$var wire 8 ! dout [7:0] $end
$var reg 16 " addr [15:0] $end
$var reg 8 # din [7:0] $end
$var reg 32 $ i [31:0] $end
$var reg 1 % phi0 $end
$var reg 1 & reset_n $end
$var reg 32 ' seed [31:0] $end
$var reg 1 ( we $end
$scope module mem_test $end
$var wire 16 ) addr [15:0] $end
$var wire 1 % clk $end
$var wire 8 * din [7:0] $end
$var wire 1 & reset_n $end
$var wire 1 ( we $end
$var wire 16 + local_addr [15:0] $end
$var wire 8 , dout [7:0] $end
$var parameter 32 - ADDR_WIDTH $end
$var parameter 32 . BASE $end
$var parameter 32 / DEPTH $end
$var parameter 32 0 WIDTH $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 0
b10000 /
b0 .
b10000 -
$end
#0
$dumpvars
bz ,
b1111011111011011 +
b10100 *
b1111011111011011 )
1(
b11101101101001101111010100110101 '
x&
0%
b0 $
b10100 #
b1111011111011011 "
bz !
$end
#5
1%
#10
bx !
bx ,
0(
0%
#15
1%
#20
bz !
bz ,
b1100001000110101 +
1(
b1100001000110101 "
b1100001000110101 )
b1111100 #
b1111100 *
b11010111111001100000101001011 '
b1 $
0%
#25
1%
#30
bx !
bx ,
0(
0%
#35
1%
#40
bz !
bz ,
b1001011011110010 +
1(
b1001011011110010 "
b1001011011110010 )
b1100111 #
b1100111 *
b1111001010111001001010011010001 '
b10 $
0%
#45
1%
#50
bx !
bx ,
0(
0%
#55
1%
#60
bz !
bz ,
b11101001000000 +
1(
b11101001000000 "
b11101001000000 )
b11101111 #
b11101111 *
b100000010001010011100101000111 '
b11 $
0%
#65
1%
#70
bx !
bx ,
0(
0%
#75
1%
#80
bz !
bz ,
b1111011100001111 +
1(
b1111011100001111 "
b1111011100001111 )
b101001 #
b101001 *
b10000111111001011111010000101101 '
b100 $
0%
#85
1%
#90
bx !
bx ,
0(
0%
#95
1%
#100
bz !
bz ,
b1110100100111011 +
1(
b1110100100111011 "
b1110100100111011 )
b11101001 #
b11101001 *
b10011101110110011110011100000011 '
b101 $
0%
#105
1%
#110
bx !
bx ,
0(
0%
#115
1%
#120
bz !
bz ,
b111000011101010 +
1(
b111000011101010 "
b111000011101010 )
b10111110 #
b10111110 *
b1110101011010100110111101001001 '
b110 $
0%
#125
1%
#130
bx !
bx ,
0(
0%
#135
1%
#140
bz !
bz ,
b1000100000110100 +
1(
b1000100000110100 "
b1000100000110100 )
b10111010 #
b10111010 *
b11010011100001000011001111111 '
b111 $
0%
#145
1%
#150
bx !
bx ,
0(
0%
#155
1%
#160
bz !
bz ,
b10010001110011 +
1(
b10010001110011 "
b10010001110011 )
b11010010 #
b11010010 *
b111001101011010010001000100101 '
b1000 $
0%
#165
1%
#170
bx !
bx ,
0(
0%
#175
1%
#180
bz !
bz ,
b1001010110100110 +
1(
b1001010110100110 "
b1001010110100110 )
b111001 #
b111001 *
b11010011001100001001001110111011 '
b1001 $
0%
#185
1%
#190
bx !
bx ,
0(
0%
#195
1%
#200
bz !
bz ,
b1110101011100110 +
1(
b1110101011100110 "
b1110101011100110 )
b1010010 #
b1010010 *
b1110011001010001110100011000001 '
b1010 $
0%
#205
1%
#210
bx !
bx ,
0(
0%
#215
1%
#220
bz !
bz ,
b100110011010110 +
1(
b100110011010110 "
b100110011010110 )
b1101000 #
b1101000 *
b1101011001011110100101010110111 '
b1011 $
0%
#225
1%
#230
bx !
bx ,
0(
0%
#235
1%
#240
bz !
bz ,
b110000101010011 +
1(
b110000101010011 "
b110000101010011 )
b1100 #
b1100 *
b10101001111011000101111100011101 '
b1100 $
0%
#245
1%
#250
bx !
bx ,
0(
0%
#255
1%
#260
bz !
bz ,
b1010100000010001 +
1(
b1010100000010001 "
b1010100000010001 )
b11100100 #
b11100100 *
b1000101010111010011101110011 '
b1101 $
0%
#265
1%
#270
bx !
bx ,
0(
0%
#275
1%
#280
bz !
bz ,
b1110001101001100 +
1(
b1110001101001100 "
b1110001101001100 )
b10100000 #
b10100000 *
b10100110001101011110000100111001 '
b1110 $
0%
#285
1%
#290
bx !
bx ,
0(
0%
#295
1%
#300
bz !
bz ,
b110011000111000 +
1(
b110011000111000 "
b110011000111000 )
b1101101 #
b1101101 *
b11100000010100110010111101111 '
b1111 $
0%
#305
1%
#310
bx !
bx ,
0(
0%
#315
1%
#320
bz !
bz ,
b1000110011101101 +
1(
b1000110011101101 "
b1000110011101101 )
b11000010 #
b11000010 *
b1110110110011111000101100010101 '
b10000 $
0%
#325
1%
#330
bx !
bx ,
0(
0%
#335
1%
#340
bz !
bz ,
b10110011001 +
1(
b10110011001 "
b10110011001 )
b1110010 #
b1110010 *
b11001100100100100000001000101011 '
b10001 $
0%
#345
1%
#350
bx !
bx ,
0(
0%
#355
1%
#360
bz !
bz ,
b11101100000110 +
1(
b11101100000110 "
b11101100000110 )
b1111010 #
b1111010 *
b10000011001010110011100010110001 '
b10010 $
0%
#365
1%
#370
bx !
bx ,
0(
0%
#375
1%
#380
bz !
bz ,
b1011101110001101 +
1(
b1011101110001101 "
b1011101110001101 )
b11101000 #
b11101000 *
b11000110111001101011100000100111 '
b10011 $
0%
#385
1%
#390
bx !
bx ,
0(
0%
#395
1%
#400
bz !
bz ,
b1000100110001010 +
1(
b1000100110001010 "
b1000100110001010 )
b1101100 #
b1101100 *
b11000101001111101000011000001101 '
b10100 $
0%
#405
1%
#410
bx !
bx ,
0(
0%
#415
1%
#420
bz !
bz ,
b1000010111010010 +
1(
b1000010111010010 "
b1000010111010010 )
b1001011 #
b1001011 *
b11101001010001101000001111100011 '
b10101 $
0%
#425
1%
#430
bx !
bx ,
0(
0%
#435
1%
#440
bz !
bz ,
b1101000000001110 +
1(
b1101000000001110 "
b1101000000001110 )
b11001100 #
b11001100 *
b111000111101100111100101001 '
b10110 $
0%
#445
1%
#450
bx !
bx ,
0(
0%
#455
1%
#460
bz !
bz ,
b10001000010011 +
1(
b10001000010011 "
b10001000010011 )
b100110 #
b100110 *
b1001100001010010000101011111 '
b10111 $
0%
#465
1%
#470
bx !
bx ,
0(
0%
#475
1%
#480
bz !
bz ,
b11001110000000 +
1(
b11001110000000 "
b11001110000000 )
b111 #
b111 *
b11000000010111010011000000000101 '
b11000 $
0%
#485
1%
#490
bx !
bx ,
0(
0%
#495
1%
#500
bz !
bz ,
b111110100001 +
1(
b111110100001 "
b111110100001 )
b11101100 #
b11101100 *
b11010000110010000000110010011011 '
b11001 $
0%
#505
1%
#510
bx !
bx ,
0(
0%
#515
1%
#520
bz !
bz ,
b1000011111011110 +
1(
b1000011111011110 "
b1000011111011110 )
b11001010 #
b11001010 *
b11101111001000101000010010100001 '
b11010 $
0%
#525
1%
#530
bx !
bx ,
0(
0%
#535
1%
#540
bz !
bz ,
b1000001011010010 +
1(
b1000001011010010 "
b1000001011010010 )
b10001000 #
b10001000 *
b1101001000000101000000110010111 '
b11011 $
0%
#545
1%
#550
bx !
bx ,
0(
0%
#555
1%
#560
bz !
bz ,
b110101000010010 +
1(
b110101000010010 "
b110101000010010 )
b1110010 #
b1110010 *
b1001000010110110100011111101 '
b11100 $
0%
#565
1%
#570
bx !
bx ,
0(
0%
#575
1%
#580
bz !
bz ,
b111111011110000 +
1(
b111111011110000 "
b111111011110000 )
b1110110 #
b1110110 *
b1111000001100010111110001010011 '
b11101 $
0%
#585
1%
#590
bx !
bx ,
0(
0%
#595
1%
#600
b11110 $
0%

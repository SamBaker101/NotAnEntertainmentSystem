$date
	Wed Jul 19 22:34:46 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_iflow $end
$var wire 8 ! d_to_fetch [7:0] $end
$var wire 8 " iADD [7:0] $end
$var wire 8 # iSP [7:0] $end
$var wire 8 $ iSTATUS [7:0] $end
$var wire 8 % iX [7:0] $end
$var wire 8 & iY [7:0] $end
$var wire 8 ' pc [7:0] $end
$var wire 8 ( pc_next [7:0] $end
$var wire 7 ) we [6:0] $end
$var wire 1 * we_dout $end
$var wire 1 + we_y $end
$var wire 1 , we_x $end
$var wire 1 - we_stat $end
$var wire 1 . we_sp $end
$var wire 1 / we_pc $end
$var wire 1 0 we_add $end
$var wire 3 1 target_selector_1 [2:0] $end
$var wire 3 2 target_selector_0 [2:0] $end
$var wire 3 3 source_selector_1 [2:0] $end
$var wire 3 4 source_selector_0 [2:0] $end
$var wire 8 5 reg_connect_1 [7:0] $end
$var wire 8 6 reg_connect_0 [7:0] $end
$var wire 1 7 phi2_int $end
$var wire 1 8 phi1_int $end
$var wire 8 9 oY [7:0] $end
$var wire 8 : oX [7:0] $end
$var wire 8 ; oSTATUS [7:0] $end
$var wire 8 < oSP [7:0] $end
$var wire 8 = oPC [7:0] $end
$var wire 8 > oADD [7:0] $end
$var wire 1 ? instruction_ready $end
$var wire 8 @ instruction [7:0] $end
$var wire 8 A imm [7:0] $end
$var wire 8 B ialu_b [7:0] $end
$var wire 8 C ialu_a [7:0] $end
$var wire 8 D iPC [7:0] $end
$var wire 1 E get_next $end
$var wire 16 F fetcher_addr [15:0] $end
$var wire 3 G fetch_selector [2:0] $end
$var wire 8 H d_to_mem1 [7:0] $end
$var wire 8 I d_to_mem [7:0] $end
$var wire 8 J d_from_mem [7:0] $end
$var wire 8 K d_from_fetch [7:0] $end
$var wire 16 L addr [15:0] $end
$var reg 16 M addr_in [15:0] $end
$var reg 8 N d_in [7:0] $end
$var reg 32 O i [31:0] $end
$var reg 1 P manual_mem $end
$var reg 1 Q mem_write $end
$var reg 1 R phi0 $end
$var reg 1 S reset_n $end
$var reg 32 T seed [31:0] $end
$var reg 3 U source_selector_01 [2:0] $end
$var reg 3 V target_selector_01 [2:0] $end
$scope module ADD $end
$var wire 8 W din [7:0] $end
$var wire 1 S reset_n $end
$var wire 1 X valid $end
$var wire 1 0 we $end
$var wire 1 7 clk $end
$var parameter 32 Y REG_WIDTH $end
$var reg 8 Z dout [7:0] $end
$upscope $end
$scope module PC $end
$var wire 8 [ din [7:0] $end
$var wire 1 S reset_n $end
$var wire 1 \ valid $end
$var wire 1 / we $end
$var wire 1 7 clk $end
$var parameter 32 ] REG_WIDTH $end
$var reg 8 ^ dout [7:0] $end
$upscope $end
$scope module SP $end
$var wire 8 _ din [7:0] $end
$var wire 1 S reset_n $end
$var wire 1 ` valid $end
$var wire 1 . we $end
$var wire 1 7 clk $end
$var parameter 32 a REG_WIDTH $end
$var reg 8 b dout [7:0] $end
$upscope $end
$scope module STAT $end
$var wire 8 c din [7:0] $end
$var wire 1 S reset_n $end
$var wire 1 d valid $end
$var wire 1 - we $end
$var wire 1 7 clk $end
$var parameter 32 e REG_WIDTH $end
$var reg 8 f dout [7:0] $end
$upscope $end
$scope module X $end
$var wire 8 g din [7:0] $end
$var wire 1 S reset_n $end
$var wire 1 h valid $end
$var wire 1 , we $end
$var wire 1 7 clk $end
$var parameter 32 i REG_WIDTH $end
$var reg 8 j dout [7:0] $end
$upscope $end
$scope module Y $end
$var wire 8 k din [7:0] $end
$var wire 1 S reset_n $end
$var wire 1 l valid $end
$var wire 1 + we $end
$var wire 1 7 clk $end
$var parameter 32 m REG_WIDTH $end
$var reg 8 n dout [7:0] $end
$upscope $end
$scope module clk_mod $end
$var wire 1 R phi0 $end
$var wire 1 8 phi1 $end
$var wire 1 7 phi2 $end
$var wire 1 o reset_n $end
$upscope $end
$scope module decode $end
$var wire 1 8 clk $end
$var wire 1 S reset_n $end
$var wire 1 ? instruction_ready $end
$var wire 8 p instruction_in [7:0] $end
$var parameter 32 q ADDR_WIDTH $end
$var parameter 32 r OPP_WIDTH $end
$var parameter 32 s REG_WIDTH $end
$var reg 3 t add_mode [2:0] $end
$var reg 16 u addr [15:0] $end
$var reg 4 v fetch_counter [3:0] $end
$var reg 4 w fetch_target [3:0] $end
$var reg 1 E get_next $end
$var reg 8 x imm_addr [7:0] $end
$var reg 8 y instruction [7:0] $end
$var reg 8 z opp [7:0] $end
$var reg 5 { opp_code [4:0] $end
$var reg 1 | read_write $end
$var reg 3 } source_selector_0 [2:0] $end
$var reg 3 ~ source_selector_1 [2:0] $end
$var reg 3 !" target_selector_0 [2:0] $end
$var reg 3 "" target_selector_1 [2:0] $end
$var reg 7 #" we [6:0] $end
$upscope $end
$scope module fetch $end
$var wire 1 8 clk $end
$var wire 8 $" data_in [7:0] $end
$var wire 1 E get_next $end
$var wire 8 %" pc [7:0] $end
$var wire 1 S reset_n $end
$var parameter 32 &" ADDR_WIDTH $end
$var parameter 32 '" OPP_WIDTH $end
$var parameter 32 (" REG_WIDTH $end
$var reg 3 )" add_mode [2:0] $end
$var reg 16 *" addr [15:0] $end
$var reg 3 +" fetch_counter [2:0] $end
$var reg 3 ," fetch_source_selector [2:0] $end
$var reg 8 -" instruction [7:0] $end
$var reg 8 ." instruction_out [7:0] $end
$var reg 1 ? instruction_ready $end
$var reg 8 /" pc_next [7:0] $end
$var reg 8 0" reg_out [7:0] $end
$upscope $end
$scope module mem_test $end
$var wire 16 1" addr [15:0] $end
$var wire 1 R clk $end
$var wire 8 2" din [7:0] $end
$var wire 1 S reset_n $end
$var wire 1 3" we $end
$var wire 16 4" local_addr [15:0] $end
$var wire 8 5" dout [7:0] $end
$var parameter 32 6" ADDR_WIDTH $end
$var parameter 32 7" BASE $end
$var parameter 32 8" DEPTH $end
$var parameter 32 9" WIDTH $end
$upscope $end
$scope module reg_fan0 $end
$var wire 1 7 clk $end
$var wire 3 :" selector [2:0] $end
$var wire 8 ;" in [7:0] $end
$var parameter 32 <" SIGNAL_WIDTH $end
$var reg 8 =" out0 [7:0] $end
$var reg 8 >" out1 [7:0] $end
$var reg 8 ?" out2 [7:0] $end
$var reg 8 @" out3 [7:0] $end
$var reg 8 A" out4 [7:0] $end
$var reg 8 B" out5 [7:0] $end
$var reg 8 C" out6 [7:0] $end
$var reg 8 D" out7 [7:0] $end
$upscope $end
$scope module reg_fan1 $end
$var wire 1 7 clk $end
$var wire 3 E" selector [2:0] $end
$var wire 8 F" in [7:0] $end
$var parameter 32 G" SIGNAL_WIDTH $end
$var reg 8 H" out0 [7:0] $end
$var reg 8 I" out1 [7:0] $end
$var reg 8 J" out2 [7:0] $end
$var reg 8 K" out3 [7:0] $end
$var reg 8 L" out4 [7:0] $end
$var reg 8 M" out5 [7:0] $end
$var reg 8 N" out6 [7:0] $end
$var reg 8 O" out7 [7:0] $end
$upscope $end
$scope module reg_mux0 $end
$var wire 1 7 clk $end
$var wire 8 P" in0 [7:0] $end
$var wire 8 Q" in1 [7:0] $end
$var wire 8 R" in2 [7:0] $end
$var wire 8 S" in3 [7:0] $end
$var wire 8 T" in4 [7:0] $end
$var wire 8 U" in5 [7:0] $end
$var wire 8 V" in6 [7:0] $end
$var wire 8 W" in7 [7:0] $end
$var wire 3 X" selector [2:0] $end
$var parameter 32 Y" SIGNAL_WIDTH $end
$var reg 8 Z" out [7:0] $end
$upscope $end
$scope module reg_mux1 $end
$var wire 1 7 clk $end
$var wire 8 [" in0 [7:0] $end
$var wire 8 \" in1 [7:0] $end
$var wire 8 ]" in2 [7:0] $end
$var wire 8 ^" in3 [7:0] $end
$var wire 8 _" in4 [7:0] $end
$var wire 8 `" in5 [7:0] $end
$var wire 8 a" in6 [7:0] $end
$var wire 8 b" in7 [7:0] $end
$var wire 3 c" selector [2:0] $end
$var parameter 32 d" SIGNAL_WIDTH $end
$var reg 8 e" out [7:0] $end
$upscope $end
$scope begin main_loop $end
$var reg 8 f" mem_unit [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 d"
b1000 Y"
b1000 G"
b1000 <"
b1000 9"
b100000 8"
b0 7"
b10000 6"
b1000 ("
b1000 '"
b10000 &"
b1000 s
b1000 r
b10000 q
b1000 m
b1000 i
b1000 e
b1000 a
b1000 ]
b1000 Y
$end
#0
$dumpvars
b10100 f"
bx e"
bx c"
bx b"
b0 a"
bz `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx X"
bx W"
b0 V"
bz U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx F"
b0 E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx ;"
bx :"
bz 5"
b0 4"
13"
b10100 2"
b0 1"
bx 0"
bx /"
bx ."
bx -"
b101 ,"
bx +"
bx *"
bx )"
bx %"
bx $"
b0 #"
b0 ""
b0 !"
bx ~
bx }
1|
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx p
zo
bx n
zl
bx k
bx j
zh
bx g
bx f
zd
bz c
bx b
z`
bz _
bx ^
z\
bx [
bx Z
zX
bx W
bx V
bx U
b10001010000111111011011000000100 T
xS
0R
1Q
1P
b0 O
b10100 N
b0 M
b0 L
bx K
bz J
bx I
b10100 H
b101 G
bx F
xE
bx D
bx C
bx B
bx A
bx @
x?
bx >
bx =
bx <
bx ;
bx :
bx 9
18
07
bx 6
bx 5
bx 4
bx 3
b0 2
b0 1
00
x/
0.
0-
0,
0+
x*
b100000x )
bx (
bx '
bx &
bx %
bz $
bz #
bx "
bx !
$end
#10
b1 4"
b11011011 H
b11011011 2"
b1 L
b1 1"
bz 6
bz ;"
bz Z"
b111 V
b111 :"
b101 U
b101 X"
08
b11011011 N
b1 M
b11011011 f"
b11101101101001101111010100110101 T
b1 O
17
1R
#15
18
07
0R
#20
b10 4"
b1111100 H
b1111100 2"
b10 L
b10 1"
bz D"
08
b1111100 N
b10 M
b1111100 f"
b10111110010110110000110001110010 T
b10 O
17
1R
#25
18
07
0R
#30
b11 4"
b110101 H
b110101 2"
b11 L
b11 1"
08
b110101 N
b11 M
b110101 f"
b11010111111001100000101001011 T
b11 O
17
1R
#35
18
07
0R
#40
b100 4"
b1100111 H
b1100111 2"
b100 L
b100 1"
08
b1100111 N
b100 M
b1100111 f"
b110011100000101001100000010000 T
b100 O
17
1R
#45
18
07
0R
#50
b101 4"
b11110010 H
b11110010 2"
b101 L
b101 1"
08
b11110010 N
b101 M
b11110010 f"
b1111001010111001001010011010001 T
b101 O
17
1R
#55
18
07
0R
#60
b110 4"
b11101111 H
b11101111 2"
b110 L
b110 1"
08
b11101111 N
b110 M
b11101111 f"
b1110111100000101100100001011110 T
b110 O
17
1R
#65
18
07
0R
#70
b111 4"
b1000000 H
b1000000 2"
b111 L
b111 1"
08
b1000000 N
b111 M
b1000000 f"
b100000010001010011100101000111 T
b111 O
17
1R
#75
18
07
0R
#80
b1000 4"
b101001 H
b101001 2"
b1000 L
b1000 1"
08
b101001 N
b1000 M
b101001 f"
b10010100100111100111100011011100 T
b1000 O
17
1R
#85
18
07
0R
#90
b1001 4"
b1111 H
b1111 2"
b1001 L
b1001 1"
08
b1111 N
b1001 M
b1111 f"
b10000111111001011111010000101101 T
b1001 O
17
1R
#95
18
07
0R
#100
b1010 4"
b11101001 H
b11101001 2"
b1010 L
b1010 1"
08
b11101001 N
b1010 M
b11101001 f"
b1110100101101111101000100001010 T
b1010 O
17
1R
#105
18
07
0R
#110
b1011 4"
b111011 H
b111011 2"
b1011 L
b1011 1"
08
b111011 N
b1011 M
b111011 f"
b10011101110110011110011100000011 T
b1011 O
17
1R
#115
18
07
0R
#120
b1100 4"
b10111110 H
b10111110 2"
b1100 L
b1100 1"
08
b10111110 N
b1100 M
b10111110 f"
b1011111001111000010010001101000 T
b1100 O
17
1R
#125
18
07
0R
#130
b1101 4"
b11101010 H
b11101010 2"
b1101 L
b1101 1"
08
b11101010 N
b1101 M
b11101010 f"
b1110101011010100110111101001001 T
b1101 O
17
1R
#135
18
07
0R
#140
b1110 4"
b10111010 H
b10111010 2"
b1110 L
b1110 1"
08
b10111010 N
b1110 M
b10111010 f"
b11011101001010101101001001110110 T
b1110 O
17
1R
#145
18
07
0R
#150
b1111 4"
b110100 H
b110100 2"
b1111 L
b1111 1"
08
b110100 N
b1111 M
b110100 f"
b11010011100001000011001111111 T
b1111 O
17
1R
#155
18
07
0R
#160
b10100 J
b10100 5"
b10100 U"
b10100 `"
b0 4"
03"
b0 L
b0 1"
b0x )
08
bz f"
b0 M
0Q
b0 O
17
1R
#165
18
07
0R
#170
b11011011 J
b11011011 5"
b11011011 U"
b11011011 `"
b1 4"
b1 L
b1 1"
b10100 6
b10100 ;"
b10100 Z"
08
b10100 f"
b1 M
b1 O
17
1R
#175
18
07
0R
#180
b11011011 D"
b11011011 6
b11011011 ;"
b11011011 Z"
08
17
1R

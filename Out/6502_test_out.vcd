$date
	Fri Jul 14 17:45:49 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_6502_top $end
$var wire 16 ! A [15:0] $end
$var wire 8 " D [7:0] $end
$var wire 1 # sync $end
$var wire 1 $ phi2 $end
$var wire 1 % phi1 $end
$var wire 1 & R_W_n $end
$var reg 1 ' NMI_n $end
$var reg 1 ( irq_n $end
$var reg 1 ) overflow_set_n $end
$var reg 1 * phi0 $end
$var reg 1 + rdy $end
$var reg 1 , reset_n $end
$scope module cpu $end
$var wire 16 - A [15:0] $end
$var wire 8 . D [7:0] $end
$var wire 1 ' NMI_n $end
$var wire 1 / carry_in $end
$var wire 8 0 fetch_reg_in [7:0] $end
$var wire 8 1 iADD [7:0] $end
$var wire 8 2 iPC [7:0] $end
$var wire 8 3 iSP [7:0] $end
$var wire 8 4 iSTATUS [7:0] $end
$var wire 8 5 iX [7:0] $end
$var wire 8 6 iY [7:0] $end
$var wire 1 ( irq_n $end
$var wire 1 ) overflow_set_n $end
$var wire 1 * phi0 $end
$var wire 1 % phi1 $end
$var wire 1 $ phi2 $end
$var wire 1 + rdy $end
$var wire 8 7 read_in [7:0] $end
$var wire 1 , reset_n $end
$var wire 1 # sync $end
$var wire 1 8 we_add $end
$var wire 1 9 we_pc $end
$var wire 1 : we_stat $end
$var wire 1 ; we_x $end
$var wire 1 < we_y $end
$var wire 1 = we_sp $end
$var wire 6 > we [5:0] $end
$var wire 3 ? target_selector_1 [2:0] $end
$var wire 3 @ target_selector_0 [2:0] $end
$var wire 3 A source_selector_1 [2:0] $end
$var wire 3 B source_selector_0 [2:0] $end
$var wire 8 C reg_connect_1 [7:0] $end
$var wire 8 D reg_connect_0 [7:0] $end
$var wire 1 E phi2_int $end
$var wire 1 F phi1_int $end
$var wire 8 G opp [7:0] $end
$var wire 8 H oY [7:0] $end
$var wire 8 I oX [7:0] $end
$var wire 8 J oSTATUS [7:0] $end
$var wire 8 K oSP [7:0] $end
$var wire 8 L oPC [7:0] $end
$var wire 8 M oADD [7:0] $end
$var wire 1 N instruction_ready $end
$var wire 8 O instruction [7:0] $end
$var wire 8 P imm_addr [7:0] $end
$var wire 8 Q ialu_b [7:0] $end
$var wire 8 R ialu_a [7:0] $end
$var wire 1 S get_next $end
$var wire 3 T fetch_selector [2:0] $end
$var wire 8 U fetch_reg_out [7:0] $end
$var wire 1 V carry_out $end
$var wire 1 & R_W_n $end
$var reg 3 W source_selector_01 [2:0] $end
$var reg 3 X target_selector_01 [2:0] $end
$scope module ADD $end
$var wire 8 Y din [7:0] $end
$var wire 1 , reset_n $end
$var wire 1 Z valid $end
$var wire 1 8 we $end
$var wire 1 E clk $end
$var parameter 32 [ REG_WIDTH $end
$var reg 8 \ dout [7:0] $end
$upscope $end
$scope module PC $end
$var wire 8 ] din [7:0] $end
$var wire 1 , reset_n $end
$var wire 1 ^ valid $end
$var wire 1 9 we $end
$var wire 1 E clk $end
$var parameter 32 _ REG_WIDTH $end
$var reg 8 ` dout [7:0] $end
$upscope $end
$scope module SP $end
$var wire 8 a din [7:0] $end
$var wire 1 , reset_n $end
$var wire 1 b valid $end
$var wire 1 = we $end
$var wire 1 E clk $end
$var parameter 32 c REG_WIDTH $end
$var reg 8 d dout [7:0] $end
$upscope $end
$scope module STAT $end
$var wire 8 e din [7:0] $end
$var wire 1 , reset_n $end
$var wire 1 f valid $end
$var wire 1 : we $end
$var wire 1 E clk $end
$var parameter 32 g REG_WIDTH $end
$var reg 8 h dout [7:0] $end
$upscope $end
$scope module X $end
$var wire 8 i din [7:0] $end
$var wire 1 , reset_n $end
$var wire 1 j valid $end
$var wire 1 ; we $end
$var wire 1 E clk $end
$var parameter 32 k REG_WIDTH $end
$var reg 8 l dout [7:0] $end
$upscope $end
$scope module Y $end
$var wire 8 m din [7:0] $end
$var wire 1 , reset_n $end
$var wire 1 n valid $end
$var wire 1 < we $end
$var wire 1 E clk $end
$var parameter 32 o REG_WIDTH $end
$var reg 8 p dout [7:0] $end
$upscope $end
$scope module alu $end
$var wire 1 / carry_in $end
$var wire 1 q dec_mode $end
$var wire 1 r half_carry $end
$var wire 1 s overflow $end
$var wire 1 , reset_n $end
$var wire 1 E phi2 $end
$var wire 1 F phi1 $end
$var wire 8 t func [7:0] $end
$var wire 8 u b [7:0] $end
$var wire 8 v a [7:0] $end
$var reg 8 w add [7:0] $end
$var reg 1 V carry_out $end
$var reg 8 x status [7:0] $end
$var reg 1 y wout $end
$var reg 1 z wout_status $end
$upscope $end
$scope module clk_mod $end
$var wire 1 * phi0 $end
$var wire 1 F phi1 $end
$var wire 1 E phi2 $end
$var wire 1 { reset_n $end
$upscope $end
$scope module decode $end
$var wire 1 F clk $end
$var wire 1 , reset_n $end
$var wire 1 N instruction_ready $end
$var wire 8 | instruction_in [7:0] $end
$var parameter 32 } ADDR_WIDTH $end
$var parameter 32 ~ OPP_WIDTH $end
$var parameter 32 !" REG_WIDTH $end
$var reg 3 "" add_mode [2:0] $end
$var reg 16 #" addr [15:0] $end
$var reg 4 $" fetch_counter [3:0] $end
$var reg 4 %" fetch_target [3:0] $end
$var reg 1 S get_next $end
$var reg 8 &" imm_addr [7:0] $end
$var reg 8 '" instruction [7:0] $end
$var reg 8 (" opp [7:0] $end
$var reg 5 )" opp_code [4:0] $end
$var reg 1 & read_write $end
$var reg 3 *" source_selector_0 [2:0] $end
$var reg 3 +" source_selector_1 [2:0] $end
$var reg 3 ," target_selector_0 [2:0] $end
$var reg 3 -" target_selector_1 [2:0] $end
$var reg 6 ." we [5:0] $end
$upscope $end
$scope module fetch $end
$var wire 1 F clk $end
$var wire 8 /" data_in [7:0] $end
$var wire 1 S get_next $end
$var wire 8 0" pc [7:0] $end
$var wire 1 , reset_n $end
$var parameter 32 1" ADDR_WIDTH $end
$var parameter 32 2" OPP_WIDTH $end
$var parameter 32 3" REG_WIDTH $end
$var reg 3 4" add_mode [2:0] $end
$var reg 16 5" addr [15:0] $end
$var reg 3 6" fetch_counter [2:0] $end
$var reg 3 7" fetch_source_selector [2:0] $end
$var reg 8 8" instruction [7:0] $end
$var reg 8 9" instruction_out [7:0] $end
$var reg 1 N instruction_ready $end
$var reg 8 :" pc_next [7:0] $end
$var reg 8 ;" reg_out [7:0] $end
$var reg 1 <" we_pc $end
$upscope $end
$scope module reg_fan0 $end
$var wire 1 E clk $end
$var wire 3 =" selector [2:0] $end
$var wire 8 >" in [7:0] $end
$var parameter 32 ?" SIGNAL_WIDTH $end
$var reg 8 @" out0 [7:0] $end
$var reg 8 A" out1 [7:0] $end
$var reg 8 B" out2 [7:0] $end
$var reg 8 C" out3 [7:0] $end
$var reg 8 D" out4 [7:0] $end
$var reg 8 E" out5 [7:0] $end
$var reg 8 F" out6 [7:0] $end
$var reg 8 G" out7 [7:0] $end
$upscope $end
$scope module reg_fan1 $end
$var wire 1 E clk $end
$var wire 3 H" selector [2:0] $end
$var wire 8 I" in [7:0] $end
$var parameter 32 J" SIGNAL_WIDTH $end
$var reg 8 K" out0 [7:0] $end
$var reg 8 L" out1 [7:0] $end
$var reg 8 M" out2 [7:0] $end
$var reg 8 N" out3 [7:0] $end
$var reg 8 O" out4 [7:0] $end
$var reg 8 P" out5 [7:0] $end
$var reg 8 Q" out6 [7:0] $end
$var reg 8 R" out7 [7:0] $end
$upscope $end
$scope module reg_mux0 $end
$var wire 1 E clk $end
$var wire 8 S" in0 [7:0] $end
$var wire 8 T" in1 [7:0] $end
$var wire 8 U" in2 [7:0] $end
$var wire 8 V" in3 [7:0] $end
$var wire 8 W" in4 [7:0] $end
$var wire 8 X" in5 [7:0] $end
$var wire 8 Y" in6 [7:0] $end
$var wire 8 Z" in7 [7:0] $end
$var wire 3 [" selector [2:0] $end
$var parameter 32 \" SIGNAL_WIDTH $end
$var reg 8 ]" out [7:0] $end
$upscope $end
$scope module reg_mux1 $end
$var wire 1 E clk $end
$var wire 8 ^" in0 [7:0] $end
$var wire 8 _" in1 [7:0] $end
$var wire 8 `" in2 [7:0] $end
$var wire 8 a" in3 [7:0] $end
$var wire 8 b" in4 [7:0] $end
$var wire 8 c" in5 [7:0] $end
$var wire 8 d" in6 [7:0] $end
$var wire 8 e" in7 [7:0] $end
$var wire 3 f" selector [2:0] $end
$var parameter 32 g" SIGNAL_WIDTH $end
$var reg 8 h" out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 g"
b1000 \"
b1000 J"
b1000 ?"
b1000 3"
b1000 2"
b10000 1"
b1000 !"
b1000 ~
b10000 }
b1000 o
b1000 k
b1000 g
b1000 c
b1000 _
b1000 [
$end
#0
$dumpvars
bx h"
bx f"
bx e"
b0 d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx ["
bx Z"
b0 Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx >"
bx ="
x<"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx |
z{
xz
xy
bx x
bx w
bx v
bx u
bx t
zs
zr
zq
bx p
zn
bx m
bx l
zj
bx i
bx h
zf
bz e
bx d
zb
bz a
bx `
z^
bx ]
bx \
zZ
bx Y
bx X
bx W
xV
bx U
bx T
xS
bx R
bx Q
bx P
bx O
xN
bx M
bx L
bx K
bx J
bx I
bx H
bx G
0F
1E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
x=
x<
x;
x:
x9
x8
bx 7
bx 6
bx 5
bz 4
bz 3
bx 2
bx 1
bx 0
z/
bx .
bx -
x,
x+
1*
x)
x(
x'
x&
0%
1$
z#
bx "
bx !
$end
#5
08
0=
09
0N
0<"
b0 %"
b0 $"
b0 ?
b0 -"
b0 H"
b0 @
b0 ,"
1&
b0 >
b0 ."
0y
bz w
1%
1F
0$
0E
0*

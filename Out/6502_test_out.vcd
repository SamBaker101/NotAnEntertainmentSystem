$date
	Wed Jul 12 23:00:21 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_top $end
$var wire 8 ! tb_oSTATUS [7:0] $end
$var wire 8 " tb_oSP [7:0] $end
$var wire 8 # tb_oPC [7:0] $end
$var wire 8 $ tb_oADD [7:0] $end
$var wire 1 % tb_carry_out $end
$var wire 1 & phi2 $end
$var wire 1 ' phi1 $end
$var reg 8 ( i [7:0] $end
$var reg 8 ) instruction [7:0] $end
$var reg 8 * j [7:0] $end
$var reg 8 + opp [7:0] $end
$var reg 1 , phi0 $end
$var reg 1 - reset_n $end
$var reg 32 . seed [31:0] $end
$var reg 1 / tb_carry_in $end
$var reg 8 0 tb_iPC [7:0] $end
$var reg 8 1 tb_iX [7:0] $end
$var reg 8 2 tb_iY [7:0] $end
$var reg 2 3 tb_selector_a [1:0] $end
$var reg 2 4 tb_selector_b [1:0] $end
$var reg 4 5 tb_we [3:0] $end
$scope module dut $end
$var wire 1 6 carry_in $end
$var wire 8 7 iPC [7:0] $end
$var wire 8 8 iSP [7:0] $end
$var wire 8 9 iSTATUS [7:0] $end
$var wire 8 : iX [7:0] $end
$var wire 8 ; iY [7:0] $end
$var wire 1 , phi0 $end
$var wire 1 ' phi1 $end
$var wire 1 & phi2 $end
$var wire 8 < read_in [7:0] $end
$var wire 1 - reset_n $end
$var wire 3 = selector_a [2:0] $end
$var wire 3 > selector_b [2:0] $end
$var wire 1 / tb_carry_in $end
$var wire 1 % tb_carry_out $end
$var wire 8 ? tb_iPC [7:0] $end
$var wire 8 @ tb_iX [7:0] $end
$var wire 8 A tb_iY [7:0] $end
$var wire 8 B tb_instruction [7:0] $end
$var wire 8 C tb_oADD [7:0] $end
$var wire 8 D tb_oPC [7:0] $end
$var wire 8 E tb_oSP [7:0] $end
$var wire 8 F tb_oSTATUS [7:0] $end
$var wire 2 G tb_selector_a [1:0] $end
$var wire 2 H tb_selector_b [1:0] $end
$var wire 4 I tb_we [3:0] $end
$var wire 1 J we_sp $end
$var wire 1 K we_stat $end
$var wire 1 L we_y $end
$var wire 1 M we_x $end
$var wire 1 N we_pc $end
$var wire 1 O we_add $end
$var wire 1 P phi2_int $end
$var wire 1 Q phi1_int $end
$var wire 8 R opp [7:0] $end
$var wire 8 S oY [7:0] $end
$var wire 8 T oX [7:0] $end
$var wire 8 U oSTATUS [7:0] $end
$var wire 8 V oSP [7:0] $end
$var wire 8 W oPC [7:0] $end
$var wire 8 X oADD [7:0] $end
$var wire 8 Y ialu_b [7:0] $end
$var wire 8 Z ialu_a [7:0] $end
$var wire 8 [ iADD [7:0] $end
$var wire 1 \ carry_out $end
$var wire 8 ] Imm [7:0] $end
$scope module ADD $end
$var wire 1 - reset_n $end
$var wire 1 ^ valid $end
$var wire 1 O we $end
$var wire 8 _ din [7:0] $end
$var wire 1 P clk $end
$var parameter 32 ` REG_WIDTH $end
$var reg 8 a dout [7:0] $end
$upscope $end
$scope module PC $end
$var wire 8 b din [7:0] $end
$var wire 1 - reset_n $end
$var wire 1 c valid $end
$var wire 1 N we $end
$var wire 1 P clk $end
$var parameter 32 d REG_WIDTH $end
$var reg 8 e dout [7:0] $end
$upscope $end
$scope module SP $end
$var wire 8 f din [7:0] $end
$var wire 1 - reset_n $end
$var wire 1 g valid $end
$var wire 1 J we $end
$var wire 1 P clk $end
$var parameter 32 h REG_WIDTH $end
$var reg 8 i dout [7:0] $end
$upscope $end
$scope module STAT $end
$var wire 8 j din [7:0] $end
$var wire 1 - reset_n $end
$var wire 1 k valid $end
$var wire 1 K we $end
$var wire 1 P clk $end
$var parameter 32 l REG_WIDTH $end
$var reg 8 m dout [7:0] $end
$upscope $end
$scope module X $end
$var wire 8 n din [7:0] $end
$var wire 1 - reset_n $end
$var wire 1 o valid $end
$var wire 1 M we $end
$var wire 1 P clk $end
$var parameter 32 p REG_WIDTH $end
$var reg 8 q dout [7:0] $end
$upscope $end
$scope module Y $end
$var wire 8 r din [7:0] $end
$var wire 1 - reset_n $end
$var wire 1 s valid $end
$var wire 1 L we $end
$var wire 1 P clk $end
$var parameter 32 t REG_WIDTH $end
$var reg 8 u dout [7:0] $end
$upscope $end
$scope module alu $end
$var wire 1 6 carry_in $end
$var wire 1 v dec_mode $end
$var wire 1 w half_carry $end
$var wire 1 x overflow $end
$var wire 1 - reset_n $end
$var wire 1 P phi2 $end
$var wire 1 Q phi1 $end
$var wire 8 y func [7:0] $end
$var wire 8 z b [7:0] $end
$var wire 8 { a [7:0] $end
$var reg 8 | add [7:0] $end
$var reg 1 \ carry_out $end
$var reg 8 } status [7:0] $end
$var reg 1 O wout $end
$var reg 1 ~ wout_status $end
$upscope $end
$scope module alu_a $end
$var wire 8 !" in0 [7:0] $end
$var wire 8 "" in1 [7:0] $end
$var wire 8 #" in2 [7:0] $end
$var wire 8 $" in3 [7:0] $end
$var wire 8 %" in5 [7:0] $end
$var wire 8 &" in6 [7:0] $end
$var wire 8 '" in7 [7:0] $end
$var wire 3 (" selector [2:0] $end
$var wire 8 )" in4 [7:0] $end
$var wire 1 Q clk $end
$var parameter 32 *" SIGNAL_WIDTH $end
$var reg 8 +" out [7:0] $end
$upscope $end
$scope module alu_b $end
$var wire 8 ," in0 [7:0] $end
$var wire 8 -" in1 [7:0] $end
$var wire 8 ." in2 [7:0] $end
$var wire 8 /" in3 [7:0] $end
$var wire 8 0" in5 [7:0] $end
$var wire 8 1" in6 [7:0] $end
$var wire 8 2" in7 [7:0] $end
$var wire 3 3" selector [2:0] $end
$var wire 8 4" in4 [7:0] $end
$var wire 1 Q clk $end
$var parameter 32 5" SIGNAL_WIDTH $end
$var reg 8 6" out [7:0] $end
$upscope $end
$scope module clk_mod $end
$var wire 1 , phi0 $end
$var wire 1 Q phi1 $end
$var wire 1 P phi2 $end
$var wire 1 7" reset_n $end
$upscope $end
$scope module decode $end
$var wire 1 Q clk $end
$var wire 8 8" read [7:0] $end
$var wire 1 - reset_n $end
$var parameter 32 9" ADDR_WIDTH $end
$var parameter 32 :" OPP_WIDTH $end
$var parameter 32 ;" REG_WIDTH $end
$var reg 3 <" add_mode [2:0] $end
$var reg 16 =" addr [15:0] $end
$var reg 4 >" fetch_counter [3:0] $end
$var reg 4 ?" fetch_target [3:0] $end
$var reg 8 @" imm [7:0] $end
$var reg 1 A" instruct_ready $end
$var reg 8 B" instruction [7:0] $end
$var reg 8 C" opp [7:0] $end
$var reg 5 D" opp_code [4:0] $end
$var reg 3 E" reg_sel_a [2:0] $end
$var reg 3 F" reg_sel_b [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 ;"
b1000 :"
b10000 9"
b1000 5"
b1000 *"
b1000 t
b1000 p
b1000 l
b1000 h
b1000 d
b1000 `
$end
#0
$dumpvars
bx F"
bx E"
bx D"
bx C"
bx B"
0A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx 8"
z7"
bx 6"
bx 4"
bx 3"
bz 2"
bz 1"
bz 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx )"
bx ("
bz '"
bz &"
bz %"
bx $"
bx #"
bx ""
bx !"
x~
bx }
bz |
bx {
bx z
bx y
zx
zw
zv
bx u
zs
bx r
bx q
zo
bx n
bx m
zk
bz j
bx i
zg
bz f
bx e
zc
bx b
bx a
bz _
z^
bx ]
x\
bz [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
1Q
0P
0O
xN
xM
xL
zK
zJ
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bz 9
bz 8
bx 7
x6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
b1000001100001111 .
1-
0,
bx +
bx *
bx )
bx (
1'
0&
x%
bx $
bx #
bx "
bx !
$end
#1
0'
0Q
1&
1P
1,
#2
1'
1Q
0&
0P
0,
#3
0'
0Q
1&
1P
1,
#4
b0 ?"
b0 >"
b0 ]
b0 )"
b0 4"
b0 @"
b0xx >
b0xx 3"
b0 F"
b0xx =
b0xx ("
b0 E"
b0 R
b0 y
b0 C"
b0 [
b0 _
b0 |
1'
1Q
0&
0P
0,
0-
#5
b0 #
b0 D
b0 W
b0 e
b0 !"
b0 ,"
b0 "
b0 E
b0 V
b0 i
b0 $
b0 C
b0 X
b0 a
b0 ""
b0 -"
b0 T
b0 q
b0 #"
b0 ."
b0 S
b0 u
b0 $"
b0 /"
b0 !
b0 F
b0 U
b0 m
0'
0Q
1&
1P
1,
#6
1'
1Q
0&
0P
0,
#7
0'
0Q
1&
1P
1,
#8
bz [
bz _
bz |
1'
1Q
0&
0P
0,
1-
